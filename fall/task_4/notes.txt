РАБОТА С ВЕТКАМИ

Источники: 
http://blog.nsws.ru/rabota-s-git-dlya-nachinayushhix.html
http://habrahabr.ru/post/106912/
http://www.webdelphi.ru/2010/07/dvcs-git-i-tortoisegit-v-kartinkax-posobie-dlya-nachinayushhix-chajnikov/
http://git-scm.com/book/ru/Ветвление-в-Git-Примеры-работы-с-ветками
http://habrahabr.ru/post/192614/
https://github.com/rsajob/docs/wiki/%5Bgit%5D-Работа-с-ветками


Главные ветки:
Центральный репозиторий содержит две главные ветки, существующие всё время.
1)master
2)develop
Ветвь master создаётся при инициализации репозитория. Параллельно ей также мы создаём ветку для разработки под названием develop(которая в совю очередь может ветвится на неограниченное количество веток, необходимых для разработки)
Мы считаем ветку origin/master главной. То есть, исходный код в ней должен находиться в состоянии production-ready в любой произвольный момент времени.




Создание ветки: 
Для этого жмем правую кнопку мыши на директории в которую мы клонировали репозиторий и выбираем в меню «TortoiseGit — Create Branch«:
В открывшемся оке задаем название новой ветки и указываем на основании какой ветки репозитория мы будем создавать новую. Жмем «Ок», подтверждая создание ветки. Теперь переключаемся на свой новый branch.
Выбираем в меню «TortoiseGit — Switch/Checkout…«:
В открывшемся окне выбираем нашу новую ветку и жмем «Ок». Убеждаемся, что мы успешно переключились:
По сути, все что касалось создания нового branch’a в консоли решилось бы всего одной командой:
"checkout -b new-branch"



Слияние веток:
Например нужно слить ветку feature, в которой несколько коммитов в мастер так чтобы это был один коммит в мастере.
git co master
git merge --squash feature
при этом в индекс положаться все изменения которые были сделаны (всё сольётся в кучу) но не будет закоммичено. остаётся всё закоммитить одним коммитом.



Связывание веток
Отправить локальную ветку в удалённый репозиторий
git push origin feature # связь между ними не создаётся
git push -u origin feature # -u - привязать локальную ветку к удалённой
Выкачиваем и отслеживаем ветку из удалённого репозитория
git checkout --track origin/feature
git checkout --track -b my-feature origin/_feature # имя локальной ветки делаем my-feature
Cвязать существующую локальную ветку с существующей удаленной:
git branch --set-upstream feature origin/feature



ОСНОВНЫЕ КОМАНДЫ
git branch -a - отобразить все ветки
git branch -D local-branch - удалить локальную ветку
git checkout local-branch - переключитсья на локальную ветку
git merge local-branch - наложить изменения из локальной ветки в текущую
git checkout -b local-branch remotes/origin/master - скачать ветку с удаленного репозитория и переключиться на нее
git pull - скачать нвые изменения
git commit -a -m 'message' - подтверждение изменений в текущей ветке
git remote add username-project git@github.com:username/project.git - добавление ссылки на удаленный репозиторий
git remote update - обновить информацию о удаленном репозитории
git remote rm username-project - удаление ссылки на удаленный репозиторий
git push username-project current-branch:remote-branch - запись текущей ветки в удаленный репозиторий
git reset HEAD~10 - откатить форк на нужное количество коммитов

