Главные ветки:
Центральный репозиторий содержит две главные ветки, существующие всё время.
1)master
2)develop
Ветвь master создаётся при инициализации репозитория. Параллельно ей также мы создаём ветку для разработки под названием develop(которая в совю очередь может ветвится на неограниченное количество веток, необходимых для разработки)
Мы считаем ветку origin/master главной. То есть, исходный код в ней должен находиться в состоянии production-ready в любой произвольный момент времени.

Создание ветки: 
Для этого жмем правую кнопку мыши на директории в которую мы клонировали репозиторий и выбираем в меню «TortoiseGit — Create Branch«:
В открывшемся оке задаем название новой ветки и указываем на основании какой ветки репозитория мы будем создавать новую. Жмем «Ок», подтверждая создание ветки. Теперь переключаемся на свой новый branch.
Выбираем в меню «TortoiseGit — Switch/Checkout…«:
В открывшемся окне выбираем нашу новую ветку и жмем «Ок». Убеждаемся, что мы успешно переключились:
По сути, все что касалось создания нового branch’a в консоли решилось бы всего одной командой:
"checkout -b new-branch"


Слияние веток:
Например нужно слить ветку feature, в которой несколько коммитов в мастер так чтобы это был один коммит в мастере.
git co master
git merge --squash feature
при этом в индекс положаться все изменения которые были сделаны (всё сольётся в кучу) но не будет закоммичено. остаётся всё закоммитить одним коммитом.


Связывание веток
Отправить локальную ветку в удалённый репозиторий
git push origin feature # связь между ними не создаётся
git push -u origin feature # -u - привязать локальную ветку к удалённой
Выкачиваем и отслеживаем ветку из удалённого репозитория
git checkout --track origin/feature
git checkout --track -b my-feature origin/_feature # имя локальной ветки делаем my-feature
Cвязать существующую локальную ветку с существующей удаленной:
git branch --set-upstream feature origin/feature
